---
# tasks file for haproxy

- name: Import assert.yml
  ansible.builtin.import_tasks:
    file: assert.yml
  run_once: yes
  delegate_to: localhost

- name: Install haproxy
  ansible.builtin.package:
    name: haproxy
    state: present

- name: Create group
  ansible.builtin.group:
    name: haproxy
    system: yes
    state: present

- name: Create user
  ansible.builtin.user:
    name: haproxy
    system: yes
    state: present

- name: Configure software
  ansible.builtin.template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
    validate: haproxy -c -f %s
    mode: "0640"
  notify:
    - Restart haproxy

- name: Copy additional haproxy configuration
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "/etc/haproxy/conf.d/{{ item.name }}.cfg"
    owner: haproxy
    group: haproxy
    mode: "0644"
  notify:
    - Test Config
    - Reload haproxy
  with_items: "{{ haproxy_additional_host_configs }}"

- name: Create list of specified additional haproxy configuration
  ansible.builtin.set_fact:
    specified_config: "{{ specified_config | default([]) + [ item.name + '.cfg'] }}"
  with_items: "{{ haproxy_additional_host_configs }}"

- name: Capture unwanted files
  ansible.builtin.find:
    paths: "/etc/haproxy/conf.d/"
    file_type: file
    excludes: "{{ specified_config | default([]) }}"
  register: unwanted_files

- name: delete unwanted files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ unwanted_files['files'] }}"
  notify:
    - Test Config
    - Reload haproxy

- name: Create log directory if it does not exist
  file:
    path: "/var/lib/haproxy/dev/"
    state: directory
    mode: "0755"
    owner: "haproxy"
    group: "haproxy"

- name: Ensure empty file is availble to bind mount log socket
  file:
    state: touch
    path: "/var/lib/haproxy/dev/log"
    access_time: preserve
    modification_time: preserve
    mode: "0755"

- name: Make log socket available to chrooted filesystem
  mount:
    src: "/dev/log"
    path: "/var/lib/haproxy/dev/log"
    opts: bind
    state: mounted
    fstype: none
  notify:
    - Test Config
    - Reload haproxy

- name: Modify selinux settings
  when:
    - ansible_selinux.status is defined
    - ansible_selinux.status == "enabled"
  block:
    - name: Add haproxy_stats_port to http_port_t selinux type
      community.general.seport:
        ports: "{{ haproxy_stats_port }}"
        proto: tcp
        setype: http_port_t
        state: present
      when:
        - haproxy_stats_port is defined

    - name: Allow haproxy to open any port
      ansible.posix.seboolean:
        name: haproxy_connect_any
        state: yes
        persistent: yes

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Start and enable haproxy
  ansible.builtin.service:
    name: haproxy
    state: started
    enabled: yes
